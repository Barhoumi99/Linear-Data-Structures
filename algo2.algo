
-------------------------------------------------------------------------------------
ALGORITHM dist_elm
VAR
    tab1 , tab2 : ARRAY_OF INTEGER[10];
    SUM : INTEGER := 0
    I, J : INTEGER 
    found : BOOLEAN 
BEGIN
    FOR i FROM 0 TO tab1.length STEP 1  DO
        write ("enter element of tab1")
        read (tab1[i])   
    END_FOR
    

    FOR j FROM 0 TO tab2.length STEP 1  DO
        write ("enter element of tab2")
        read (tab2[j])
    END_FOR

    FOR i FROM 0 TO tab1 STEP 1  DO
        found := false
        FOR j FROM 0 TO tab2 STEP 1  DO
            IF (tab1[i] == tab2[j]) THEN
                found := true 
            END_IF
        END_FOR

        IF (found = false) THEN
            SUM := SUM + tab1[i]
        END_IF

    END_FOR

    FOR j FROM 0 TO tab2 STEP 1  DO
        found := false
        FOR i FROM 0 TO tab1 STEP 1  DO
            IF (tab1[i] == tab2[j]) THEN
                found := true 
            END_IF
        END_FOR

        IF (found = false) THEN
            SUM := SUM + tab2[j]
        END_IF

    END_FOR




    write (SUM)

END

//////////////////////////////Hash-Table/////////////////////////////////////////////


ALGORITHM Hash_tab ;

VAR 
   set1 , set2 : ARRAY_OF INTEGER[10];
   HT : HASH_TABLE <integer,integer>
   i : integer
   count : INTEGER := 0
   sum : INTEGER := 0
   set_Keys : ARRAY_OF INTEGER [20]
BEGIN

   FOR i FROM 0 TO set1.length STEP step 1  DO
    IF (HT.lookup(set1[i]) = true ) THEN
        count := HT.get(set1[i])
        HT.insert(set1[i] , count+1)
    ELSE
        HT.inser(set1[i] , 1)
    END_IF
   END_FOR


   FOR i FROM 0 TO set2.length STEP step 1  DO
    IF (HT.lookup(set2[i]) = true ) THEN
        count := HT.get(set2[i])
        HT.insert(set2[i] , count+1)
    ELSE
        HT.inser(set2[i] , 1)
    END_IF
   END_FOR


   set_Keys:= HT.getKeys();
   FOR i FROM 0 TO set_Keys.length STEP step 1 DO
       IF (HT.get(set_Keys[i]) = 1 ) THEN
        sum := sum + set_Keys[i]
       END_IF
   END_FOR


   write(sum)

END